<% layout('layouts/boilerplate') %>
<div id="cluster-map" class="mb-3"></div>
<ul>
  <% for(let camps of campgrounds){ %>
  <div class="card mb-2">
    <div class="row">
      <div class="col-md-4">
        <% if (camps.images && camps.images.length > 0) { %>
        <img
          class="img-fluid"
          crossorigin="anonymous"
          src="<%=camps.images[0].url%>"
          alt="<%=camps.title %>"
        />
        <% } else { %>
        <img
          class="img-fluid"
          crossorigin="anonymous"
          src="https://res.cloudinary.com/dxl6fwlq2/image/upload/v1720292780/camptrails/lkhmordrazzbukkg8nwt.avif"
          alt="Default Image"
        />
        <% } %>
      </div>
      <div class="col-md-8">
        <div class="card-body">
          <div class="card-title">
            <h5><%=camps.title%></h5>
            <p class="card-text"><%=camps.description %></p>
            <p class="card-text">
              <small class="text-muted"><%=camps.location %></small>
            </p>
            <a class="btn btn-primary" href="/campgrounds/<%=camps._id %>"
              >View <%=camps.title %></a
            >
          </div>
        </div>
      </div>
    </div>
  </div>
  <% } %>
</ul>
<script>
  const maptilerApiKey = "<%- process.env.MAPTILER_API_KEY %>";
  const campgrounds = { features: <%- JSON.stringify(campgrounds) %>}
</script>
<script>
  maptilersdk.config.apiKey = maptilerApiKey;

  const map = new maptilersdk.Map({
    container: "cluster-map",
    style: maptilersdk.MapStyle.BRIGHT,
    center: [-103.59179687498357, 40.66995747013945],
    zoom: 1,
  });

  map.on("load", function () {
    map.addSource("campgrounds", {
      type: "geojson",
      data: campgrounds,
      cluster: true,
      clusterMaxZoom: 14, // Max zoom to cluster points on
      clusterRadius: 50, // Radius of each cluster when clustering points (defaults to 50)
    });

    map.addLayer({
      id: "clusters",
      type: "circle",
      source: "campgrounds",
      filter: ["has", "point_count"],
      paint: {
        // Use step expressions (https://docs.maptiler.com/gl-style-specification/expressions/#step)
        // with three steps to implement three types of circles:
        "circle-color": [
          "step",
          ["get", "point_count"],
          "#00BCD4",
          10,
          "#2196F3",
          30,
          "#3F51B5",
        ],
        "circle-radius": ["step", ["get", "point_count"], 15, 10, 20, 30, 25],
      },
    });

    map.addLayer({
      id: "cluster-count",
      type: "symbol",
      source: "campgrounds",
      filter: ["has", "point_count"],
      layout: {
        "text-field": "{point_count_abbreviated}",
        "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
        "text-size": 12,
      },
    });

    map.addLayer({
      id: "unclustered-point",
      type: "circle",
      source: "campgrounds",
      filter: ["!", ["has", "point_count"]],
      paint: {
        "circle-color": "#11b4da",
        "circle-radius": 4,
        "circle-stroke-width": 1,
        "circle-stroke-color": "#fff",
      },
    });

    // inspect a cluster on click
    map.on("click", "clusters", async (e) => {
      const features = map.queryRenderedFeatures(e.point, {
        layers: ["clusters"],
      });
      const clusterId = features[0].properties.cluster_id;
      const zoom = await map
        .getSource("campgrounds")
        .getClusterExpansionZoom(clusterId);
      map.easeTo({
        center: features[0].geometry.coordinates,
        zoom,
      });
    });

    // When a click event occurs on a feature in
    // the unclustered-point layer, open a popup at
    // the location of the feature, with
    // description HTML from its properties.
    map.on("click", "unclustered-point", function (e) {
      const text = e.features[0].properties.popUpMarkup;
      console.log(text);
      const coordinates = e.features[0].geometry.coordinates.slice();

      // Ensure that if the map is zoomed out such that
      // multiple copies of the feature are visible, the
      // popup appears over the copy being pointed to.
      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }

      new maptilersdk.Popup().setLngLat(coordinates).setHTML(text).addTo(map);
    });

    map.on("mouseenter", "clusters", () => {
      map.getCanvas().style.cursor = "pointer";
    });
    map.on("mouseleave", "clusters", () => {
      map.getCanvas().style.cursor = "";
    });
  });
</script>
